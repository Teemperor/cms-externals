package CoralBase

#============================================================================
# Public dependencies and build rules
#============================================================================

use LCG_Policy v*
use Boost v* LCG_Interfaces

#----------------------------------------------------------------------------
# Library
#----------------------------------------------------------------------------

apply_pattern include_dir_policy
apply_pattern lcg_shared_library

#----------------------------------------------------------------------------
# Compilation and link flags (inherited by all CORAL packages)
#----------------------------------------------------------------------------

# Workarounds for LCGCMT bugs (eg bug #45911 for the new CMT v1r20p20081118)
make_fragment application
###make_fragment library

# Workaround for CMT bug #46458 (make all_groups on vc9)
macro_remove cmt_actions_constituents "" target-winxp "make"

# Disable CRT deprecation warnings on VC9 (getenv, sprintf...)
macro_append use_cppflags '' target-vc9 ' /D_CRT_SECURE_NO_WARNINGS'

# Disable SCL deprecation warnings from boost headers on VC9 (bug #76887)
macro_append use_cppflags '' target-vc9 ' /D_SCL_SECURE_NO_WARNINGS'

# Test -std=c++0x for gcc 4.5.1 as in CMS (see task #18131)
# Disable "auto_ptr is deprecated" warning for gcc 4.5.
macro_append use_cppflags '' target-gccmax ' -std=c++0x -Wno-deprecated'

# --- Configure icc build options ---
# Fix linker warning 'feupdateenv is not implemented and will always fail'
# See http://www-lab.imr.edu/~sgi/new/intel/cc9.1/Release_Notes.htm
macro_append cpplinkflags '' target-icc ' -i-dynamic '
macro_append clinkflags '' target-icc ' -i-dynamic '
# Remove invalid compiler option '-W'
macro_remove cppflags '' target-icc '-W '
# Add leading blank before appending options (avoid issues like bug #83825)
macro_append cppflags '' target-icc ' '
# Disable remark #193: zero used for undefined preprocessing identifier
macro_append cppflags '' target-icc '-wd193 '
# Disable remark #304: access control not specified ("public" by default)
macro_append cppflags '' target-icc '-wd304 '
# Disable remark #383: valued copied to temporary, reference to temporary
macro_append cppflags '' target-icc '-wd383 '
# Disable remark #981: operands are evaluated in unspecified order
macro_append cppflags '' target-icc '-wd981 '
# Disable remark #1418: external function definition with no prior declaration
macro_append cppflags '' target-icc '-wd1418 '
# Disable remark #1572: floating-point equality comparisons unreliable
macro_append cppflags '' target-icc '-wd1572 '
# Disable remark #2259: "int" to "unsigned short" may lose significant bits
# [would prefer to keep it, but there's too many in Boost headers!]
macro_append cppflags '' target-icc '-wd2259 '
# Keep remark #68: integer conversion resulted in a change of sign
macro_append cppflags '' target-icc '-ww68 '
# Keep remark #82: storage class is not first
macro_append cppflags '' target-icc '-ww82 '
# Keep remark #111: statement is unreachable
macro_append cppflags '' target-icc '-ww111 '
# Keep remark #128: loop is not reachable from preceding code
macro_append cppflags '' target-icc '-ww128 '
# Keep remark #177: variable "xxx" was declared but never referenced
macro_append cppflags '' target-icc '-ww177 '
# Keep remark #181: argument incompatible with format string conversion
macro_append cppflags '' target-icc '-ww181 '
# Keep warning #191: type qualifier is meaningless on cast type
# Keep warning #279: controlling expression is constant
# Keep warning #327: NULL reference is not allowed
# Keep remark #424: extra ";" ignored
macro_append cppflags '' target-icc '-ww424 '
# Keep remark #444: destructor for base class "xxx" is not virtual
macro_append cppflags '' target-icc '-ww444 '
# Keep remark #522: function redeclared "inline" after being called
macro_append cppflags '' target-icc '-ww522 '
# Keep remark #593: variable "xxx" was set but never used
macro_append cppflags '' target-icc '-ww593 '
# Keep warning #654: overloaded virtual function is only partially overridden
# Keep warning #810: conversion may lose significant bits
# Keep remark #1419: external declaration in primary source file
macro_append cppflags '' target-icc '-ww1419 '
# Keep remark #1599: declaration hides variable "xxx" (declared at line nnn)
macro_append cppflags '' target-icc '-ww1599 '
# Keep warning #2165: declaring a reference with "mutable" is nonstandard

# Test for icc builds against externals built using gcc43 (bug #66893)
#macro gcc2icc $(gcc2icc) target-icc "gcc43"
#macro_prepend cpplinkflags "" \
#target-icc&target-i686 " -L$(LCG_external)/gcc/4.3.2/$(LCG_hostos)/lib " \
#target-icc&target-x86_64 " -L$(LCG_external)/gcc/4.3.2/$(LCG_hostos)/lib64 "
#path_append LD_LIBRARY_PATH "" \
#target-icc&target-i686 "$(LCG_external)/gcc/4.3.2/$(LCG_hostos)/lib" \
#target-icc&target-x86_64 "$(LCG_external)/gcc/4.3.2/$(LCG_hostos)/lib64"

# Attempt to catch C++ exceptions as well as WIN32 structured exceptions on vc9
# See http://http://msdn.microsoft.com/en-us/library/1deeycx5(VS.80).aspx
macro_remove cppflags '' i686-winxp-vc9-dbg ' /EHsc'
macro_append cppflags '' i686-winxp-vc9-dbg ' /EHa'

#----------------------------------------------------------------------------
# Boost additional libraries
#----------------------------------------------------------------------------

macro_append CoralBase_linkopts ' $(Boost_linkopts)'
macro_append lcg_CoralBase_shlibflags ' $(Boost_linkopts)'

macro_append CoralBase_linkopts ' $(Boost_linkopts_filesystem)'
macro_append lcg_CoralBase_shlibflags ' $(Boost_linkopts_filesystem)'

macro_append CoralBase_linkopts ' $(Boost_linkopts_date_time)'
macro_append lcg_CoralBase_shlibflags ' $(Boost_linkopts_date_time)'

macro_append CoralBase_linkopts ' $(Boost_linkopts_system)'
macro_append lcg_CoralBase_shlibflags ' $(Boost_linkopts_system)'

macro_append CoralBase_linkopts ' $(Boost_linkopts_thread)'
macro_append lcg_CoralBase_shlibflags ' $(Boost_linkopts_thread)'

#----------------------------------------------------------------------------
# Define the pattern for unit tests in CORAL
#----------------------------------------------------------------------------

pattern coral_unit_test \
apply_pattern lcg_unit_test_application name=unit_<package>_<tname> files=../tests/<tname>/*.cpp import2=<timport>

#----------------------------------------------------------------------------
# Define the pattern for package utilities in CORAL
#----------------------------------------------------------------------------

# This should include linkopts similar to lcg_tstexp_application (bug #91133)
pattern coral_utility \
  application <uname> -group=utilities ../utilities/<uname>/*.cpp ;\
  macro_append <uname>linkopts " $(<package>_linkopts) -llcg_<package> $(gcov_linkopts) $(icc_linkopts) " \
               target-winxp " $(<package>_linkopts) lcg_<package>.lib "

#----------------------------------------------------------------------------
# Debug flags
#----------------------------------------------------------------------------

# For debugging
###macro_append CoralBase_cppflags ' -Wall -Werror '

# For profiling
###macro_append CoralBase_cppflags ' -p ' target-winxp ''

#----------------------------------------------------------------------------
# CORAL240 API changes
#----------------------------------------------------------------------------

# The -DCORAL240 flag is now hardcoded in VersionInfo.h (bug #89707):
# it is set to two different values in the HEAD and CORAL_2_3-branch.
# All API extensions are disabled in 2.3.x and cannot be reenabled.
# The PM/SQ extensions are enabled in 2.4.x, CN/DC can be enabled here.

# Enable the CORAL240 API change (property manager struct/class)
# [disabled in 2.3.x, enabled by default in 2.4.x]
###macro_append use_cppflags ' -DCORAL240PM' WIN32 ' /DCORAL240PM'

# Enable the CORAL240 API extensions (sequences)
# [disabled in 2.3.x, enabled by default in 2.4.x]
###macro_append use_cppflags ' -DCORAL240SQ' WIN32 ' /DCORAL240SQ'

# Enable the CORAL240 API extensions (change notifications)
# [disabled in 2.3.x, can be enabled here for 2.4.x]
###macro_append use_cppflags ' -DCORAL240CN' WIN32 ' /DCORAL240CN'

# Enable the CORAL240 API extensions (delete cascade)
# [disabled in 2.3.x, can be enabled here for 2.4.x]
###macro_append use_cppflags ' -DCORAL240DC' WIN32 ' /DCORAL240DC'

#============================================================================
# Private dependencies and build rules
#============================================================================

private

use CppUnit v* LCG_Interfaces -no_auto_imports

# The unit tests
apply_pattern coral_unit_test tname=AtLiFunctionality
apply_pattern coral_unit_test tname=AtLiSpecFunctionality
apply_pattern coral_unit_test tname=AttributeReadWrite
apply_pattern coral_unit_test tname=BlobReadWrite
apply_pattern coral_unit_test tname=CppUnitExample
apply_pattern coral_unit_test tname=DataTypeBug
apply_pattern coral_unit_test tname=Date
apply_pattern coral_unit_test tname=MessageStream
apply_pattern coral_unit_test tname=TimeStamp

# Fake target for utilities
action utilities "echo No utilities in this package"
macro_remove cmt_actions_constituents "utilities"
