# Makefile.in generated by automake 1.9.6 from Makefile.am.
# tests/HepPDT/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Applicable to each test program:
srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/HepPDT
pkglibdir = $(libdir)/HepPDT
pkgincludedir = $(includedir)/HepPDT
top_builddir = ../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
#am__append_1 = $(MY_LD)$(top_builddir)/src/HepPDT \
#          $(MY_LD)$(top_builddir)/src/HepPID

check_PROGRAMS = testPID$(EXEEXT) testHepPDT$(EXEEXT) \
	testReadEvtGen$(EXEEXT) testReadQQ$(EXEEXT) \
	testReadIsajet$(EXEEXT) listPythiaNames$(EXEEXT) \
	listPDGNames$(EXEEXT) listEvtGenNames$(EXEEXT) \
	testReadParticleTable$(EXEEXT)
subdir = tests/HepPDT
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/listEvtGenNames.cc.in \
	$(srcdir)/listEvtGenNames.sh.in $(srcdir)/listPDGNames.cc.in \
	$(srcdir)/listPDGNames.sh.in $(srcdir)/listPythiaNames.cc.in \
	$(srcdir)/listPythiaNames.sh.in $(srcdir)/testHepPDT.input.in \
	$(srcdir)/testHepPDT.sh.in $(srcdir)/testPID.sh.in \
	$(srcdir)/testReadEvtGen.cc.in $(srcdir)/testReadEvtGen.sh.in \
	$(srcdir)/testReadIsajet.cc.in $(srcdir)/testReadIsajet.sh.in \
	$(srcdir)/testReadParticleTable.cc.in \
	$(srcdir)/testReadParticleTable.sh.in \
	$(srcdir)/testReadQQ.cc.in $(srcdir)/testReadQQ.sh.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/HepPDT/defs.h
CONFIG_CLEAN_FILES = testHepPDT.input listPythiaNames.cc \
	listPDGNames.cc listEvtGenNames.cc testReadParticleTable.cc \
	testReadEvtGen.cc testReadIsajet.cc testReadQQ.cc testPID.sh \
	testHepPDT.sh listPythiaNames.sh listPDGNames.sh \
	listEvtGenNames.sh testReadEvtGen.sh testReadParticleTable.sh \
	testReadIsajet.sh testReadQQ.sh
am_listEvtGenNames_OBJECTS = listEvtGenNames.$(OBJEXT)
listEvtGenNames_OBJECTS = $(am_listEvtGenNames_OBJECTS)
listEvtGenNames_LDADD = $(LDADD)
#listEvtGenNames_DEPENDENCIES = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#	$(top_builddir)/src/HepPID/libHepPID.$(SHEXT)
##listEvtGenNames_DEPENDENCIES = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##	$(top_builddir)/src/HepPID/HepPID.$(SHEXT)
listEvtGenNames_DEPENDENCIES =  \
	$(top_builddir)/src/HepPDT/libHepPDT.a \
	$(top_builddir)/src/HepPID/libHepPID.a
am_listPDGNames_OBJECTS = listPDGNames.$(OBJEXT)
listPDGNames_OBJECTS = $(am_listPDGNames_OBJECTS)
listPDGNames_LDADD = $(LDADD)
#listPDGNames_DEPENDENCIES = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#	$(top_builddir)/src/HepPID/libHepPID.$(SHEXT)
##listPDGNames_DEPENDENCIES = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##	$(top_builddir)/src/HepPID/HepPID.$(SHEXT)
listPDGNames_DEPENDENCIES =  \
	$(top_builddir)/src/HepPDT/libHepPDT.a \
	$(top_builddir)/src/HepPID/libHepPID.a
am_listPythiaNames_OBJECTS = listPythiaNames.$(OBJEXT)
listPythiaNames_OBJECTS = $(am_listPythiaNames_OBJECTS)
listPythiaNames_LDADD = $(LDADD)
#listPythiaNames_DEPENDENCIES = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#	$(top_builddir)/src/HepPID/libHepPID.$(SHEXT)
##listPythiaNames_DEPENDENCIES = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##	$(top_builddir)/src/HepPID/HepPID.$(SHEXT)
listPythiaNames_DEPENDENCIES =  \
	$(top_builddir)/src/HepPDT/libHepPDT.a \
	$(top_builddir)/src/HepPID/libHepPID.a
am_testHepPDT_OBJECTS = testHepPDT.$(OBJEXT)
testHepPDT_OBJECTS = $(am_testHepPDT_OBJECTS)
testHepPDT_LDADD = $(LDADD)
#testHepPDT_DEPENDENCIES = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#	$(top_builddir)/src/HepPID/libHepPID.$(SHEXT)
##testHepPDT_DEPENDENCIES = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##	$(top_builddir)/src/HepPID/HepPID.$(SHEXT)
testHepPDT_DEPENDENCIES =  \
	$(top_builddir)/src/HepPDT/libHepPDT.a \
	$(top_builddir)/src/HepPID/libHepPID.a
am_testPID_OBJECTS = testPID.$(OBJEXT)
testPID_OBJECTS = $(am_testPID_OBJECTS)
testPID_LDADD = $(LDADD)
#testPID_DEPENDENCIES = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#	$(top_builddir)/src/HepPID/libHepPID.$(SHEXT)
##testPID_DEPENDENCIES = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##	$(top_builddir)/src/HepPID/HepPID.$(SHEXT)
testPID_DEPENDENCIES =  \
	$(top_builddir)/src/HepPDT/libHepPDT.a \
	$(top_builddir)/src/HepPID/libHepPID.a
am_testReadEvtGen_OBJECTS = testReadEvtGen.$(OBJEXT)
testReadEvtGen_OBJECTS = $(am_testReadEvtGen_OBJECTS)
testReadEvtGen_LDADD = $(LDADD)
#testReadEvtGen_DEPENDENCIES = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#	$(top_builddir)/src/HepPID/libHepPID.$(SHEXT)
##testReadEvtGen_DEPENDENCIES = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##	$(top_builddir)/src/HepPID/HepPID.$(SHEXT)
testReadEvtGen_DEPENDENCIES =  \
	$(top_builddir)/src/HepPDT/libHepPDT.a \
	$(top_builddir)/src/HepPID/libHepPID.a
am_testReadIsajet_OBJECTS = testReadIsajet.$(OBJEXT)
testReadIsajet_OBJECTS = $(am_testReadIsajet_OBJECTS)
testReadIsajet_LDADD = $(LDADD)
#testReadIsajet_DEPENDENCIES = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#	$(top_builddir)/src/HepPID/libHepPID.$(SHEXT)
##testReadIsajet_DEPENDENCIES = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##	$(top_builddir)/src/HepPID/HepPID.$(SHEXT)
testReadIsajet_DEPENDENCIES =  \
	$(top_builddir)/src/HepPDT/libHepPDT.a \
	$(top_builddir)/src/HepPID/libHepPID.a
am_testReadParticleTable_OBJECTS = testReadParticleTable.$(OBJEXT)
testReadParticleTable_OBJECTS = $(am_testReadParticleTable_OBJECTS)
testReadParticleTable_LDADD = $(LDADD)
#testReadParticleTable_DEPENDENCIES = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#	$(top_builddir)/src/HepPID/libHepPID.$(SHEXT)
##testReadParticleTable_DEPENDENCIES = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##	$(top_builddir)/src/HepPID/HepPID.$(SHEXT)
testReadParticleTable_DEPENDENCIES =  \
	$(top_builddir)/src/HepPDT/libHepPDT.a \
	$(top_builddir)/src/HepPID/libHepPID.a
am_testReadQQ_OBJECTS = testReadQQ.$(OBJEXT)
testReadQQ_OBJECTS = $(am_testReadQQ_OBJECTS)
testReadQQ_LDADD = $(LDADD)
#testReadQQ_DEPENDENCIES = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#	$(top_builddir)/src/HepPID/libHepPID.$(SHEXT)
##testReadQQ_DEPENDENCIES = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##	$(top_builddir)/src/HepPID/HepPID.$(SHEXT)
testReadQQ_DEPENDENCIES =  \
	$(top_builddir)/src/HepPDT/libHepPDT.a \
	$(top_builddir)/src/HepPID/libHepPID.a
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)/include/HepPDT
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(listEvtGenNames_SOURCES) $(listPDGNames_SOURCES) \
	$(listPythiaNames_SOURCES) $(testHepPDT_SOURCES) \
	$(testPID_SOURCES) $(testReadEvtGen_SOURCES) \
	$(testReadIsajet_SOURCES) $(testReadParticleTable_SOURCES) \
	$(testReadQQ_SOURCES)
DIST_SOURCES = $(listEvtGenNames_SOURCES) $(listPDGNames_SOURCES) \
	$(listPythiaNames_SOURCES) $(testHepPDT_SOURCES) \
	$(testPID_SOURCES) $(testReadEvtGen_SOURCES) \
	$(testReadIsajet_SOURCES) $(testReadParticleTable_SOURCES) \
	$(testReadQQ_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/teemperor/cms/ext/heppdt/src/HepPDT-3.04.01/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/teemperor/cms/ext/heppdt/src/HepPDT-3.04.01/missing --run tar
AM_CXXFLAGS = -O -ansi -pedantic -Wall
AUTOCONF = ${SHELL} /home/teemperor/cms/ext/heppdt/src/HepPDT-3.04.01/missing --run autoconf
AUTOHEADER = ${SHELL} /home/teemperor/cms/ext/heppdt/src/HepPDT-3.04.01/missing --run autoheader
AUTOMAKE = ${SHELL} /home/teemperor/cms/ext/heppdt/src/HepPDT-3.04.01/missing --run automake-1.9
AWK = gawk
BUILD_SHARED_FALSE = #
BUILD_SHARED_TRUE = 
BUILD_STATIC_FALSE = #
BUILD_STATIC_TRUE = 
BUILD_VISUAL_FALSE = 
BUILD_VISUAL_TRUE = #
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong
COPY_P = cp -p
CPP = gcc -E
CPPFLAGS = -D_FORTIFY_SOURCE=2
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DIFF_Q = diff -q -b
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = -Wl,-O1,--sort-common,--as-needed,-z,relro
LIBOBJS = 
LIBS =  $(am__append_1)
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/teemperor/cms/ext/heppdt/src/HepPDT-3.04.01/missing --run makeinfo
MY_SHFLAGS = -fPIC -DPIC
MY_SHLINK = -shared
MY_SHNAME = -Wl,-soname,
OBJEXT = o
PACKAGE = HepPDT
PACKAGE_BUGREPORT = https://savannah.cern.ch/projects/heppdt/
PACKAGE_NAME = HepPDT
PACKAGE_STRING = HepPDT 3.04.01
PACKAGE_TARNAME = HepPDT
PACKAGE_VERSION = 3.04.01
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
SHEXT = so
STRIP = 
USE_GMAKE_FALSE = 
USE_GMAKE_TRUE = #
VERSION = 3.04.01
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_RANLIB = ranlib
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/teemperor/cms/ext/heppdt/src/HepPDT-3.04.01/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
#MAKE = gmake
INCLUDES = -I$(top_builddir)/include -I$(top_srcdir)/include
#LDADD = $(top_builddir)/src/HepPDT/libHepPDT.$(SHEXT) \
#          $(top_builddir)/src/HepPID/libHepPID.$(SHEXT)

##LDADD = $(top_builddir)/src/HepPDT/HepPDT.$(SHEXT) \
##          $(top_builddir)/src/HepPID/HepPID.$(SHEXT)


# libraries to link, and whence
LDADD = $(top_builddir)/src/HepPDT/libHepPDT.a \
          $(top_builddir)/src/HepPID/libHepPID.a

check_SCRIPTS = \
        testPID.sh testHepPDT.sh testHepPDT.input \
	testReadEvtGen.sh testReadQQ.sh testReadIsajet.sh \
	listPythiaNames.sh listPDGNames.sh listEvtGenNames.sh \
	testReadParticleTable.sh


# Identify test(s) to run when 'make check' is requested:
TESTS = \
        testPID.sh testHepPDT.sh \
	testReadEvtGen.sh testReadQQ.sh testReadIsajet.sh \
	listPythiaNames.sh listPDGNames.sh listEvtGenNames.sh \
	testReadParticleTable.sh


# Identify the test(s) for which failure is the intended outcome:
XFAIL_TESTS = 

# Identify the dependencies on a per-test basis:
testPID_SOURCES = testPID.cc
testHepPDT_SOURCES = testHepPDT.cc
testReadEvtGen_SOURCES = testReadEvtGen.cc
testReadParticleTable_SOURCES = testReadParticleTable.cc
testReadIsajet_SOURCES = testReadIsajet.cc
testReadQQ_SOURCES = testReadQQ.cc
listPythiaNames_SOURCES = listPythiaNames.cc
listPDGNames_SOURCES = listPDGNames.cc
listEvtGenNames_SOURCES = listEvtGenNames.cc

# Identify input data file(s) and prototype output file(s):
EXTRA_DIST = \
        testPID.output testHepPDT.output testHepPDT.input \
	testHepPDTfragment.output testHepPDTstatus.output \
	testHepPDTtable.output TestNuclearFragment.hh \
	testReadEvtGen.output testReadQQ.output testReadIsajet.output \
	testReadParticleTable.output testReadParticleTableStatus.output \
	listQQ.dec listPDGNames.output \
	listPythia.tbl listPythiaNames.output \
	listEvtGenNames.output


# Identify generated file(s) to be removed when 'make clean' is requested:
CLEANFILES = *.out
all: all-am

.SUFFIXES:
.SUFFIXES: .cc .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  tests/HepPDT/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  tests/HepPDT/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
testHepPDT.input: $(top_builddir)/config.status $(srcdir)/testHepPDT.input.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
listPythiaNames.cc: $(top_builddir)/config.status $(srcdir)/listPythiaNames.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
listPDGNames.cc: $(top_builddir)/config.status $(srcdir)/listPDGNames.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
listEvtGenNames.cc: $(top_builddir)/config.status $(srcdir)/listEvtGenNames.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testReadParticleTable.cc: $(top_builddir)/config.status $(srcdir)/testReadParticleTable.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testReadEvtGen.cc: $(top_builddir)/config.status $(srcdir)/testReadEvtGen.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testReadIsajet.cc: $(top_builddir)/config.status $(srcdir)/testReadIsajet.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testReadQQ.cc: $(top_builddir)/config.status $(srcdir)/testReadQQ.cc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testPID.sh: $(top_builddir)/config.status $(srcdir)/testPID.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testHepPDT.sh: $(top_builddir)/config.status $(srcdir)/testHepPDT.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
listPythiaNames.sh: $(top_builddir)/config.status $(srcdir)/listPythiaNames.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
listPDGNames.sh: $(top_builddir)/config.status $(srcdir)/listPDGNames.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
listEvtGenNames.sh: $(top_builddir)/config.status $(srcdir)/listEvtGenNames.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testReadEvtGen.sh: $(top_builddir)/config.status $(srcdir)/testReadEvtGen.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testReadParticleTable.sh: $(top_builddir)/config.status $(srcdir)/testReadParticleTable.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testReadIsajet.sh: $(top_builddir)/config.status $(srcdir)/testReadIsajet.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
testReadQQ.sh: $(top_builddir)/config.status $(srcdir)/testReadQQ.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
listEvtGenNames$(EXEEXT): $(listEvtGenNames_OBJECTS) $(listEvtGenNames_DEPENDENCIES) 
	@rm -f listEvtGenNames$(EXEEXT)
	$(CXXLINK) $(listEvtGenNames_LDFLAGS) $(listEvtGenNames_OBJECTS) $(listEvtGenNames_LDADD) $(LIBS)
listPDGNames$(EXEEXT): $(listPDGNames_OBJECTS) $(listPDGNames_DEPENDENCIES) 
	@rm -f listPDGNames$(EXEEXT)
	$(CXXLINK) $(listPDGNames_LDFLAGS) $(listPDGNames_OBJECTS) $(listPDGNames_LDADD) $(LIBS)
listPythiaNames$(EXEEXT): $(listPythiaNames_OBJECTS) $(listPythiaNames_DEPENDENCIES) 
	@rm -f listPythiaNames$(EXEEXT)
	$(CXXLINK) $(listPythiaNames_LDFLAGS) $(listPythiaNames_OBJECTS) $(listPythiaNames_LDADD) $(LIBS)
testHepPDT$(EXEEXT): $(testHepPDT_OBJECTS) $(testHepPDT_DEPENDENCIES) 
	@rm -f testHepPDT$(EXEEXT)
	$(CXXLINK) $(testHepPDT_LDFLAGS) $(testHepPDT_OBJECTS) $(testHepPDT_LDADD) $(LIBS)
testPID$(EXEEXT): $(testPID_OBJECTS) $(testPID_DEPENDENCIES) 
	@rm -f testPID$(EXEEXT)
	$(CXXLINK) $(testPID_LDFLAGS) $(testPID_OBJECTS) $(testPID_LDADD) $(LIBS)
testReadEvtGen$(EXEEXT): $(testReadEvtGen_OBJECTS) $(testReadEvtGen_DEPENDENCIES) 
	@rm -f testReadEvtGen$(EXEEXT)
	$(CXXLINK) $(testReadEvtGen_LDFLAGS) $(testReadEvtGen_OBJECTS) $(testReadEvtGen_LDADD) $(LIBS)
testReadIsajet$(EXEEXT): $(testReadIsajet_OBJECTS) $(testReadIsajet_DEPENDENCIES) 
	@rm -f testReadIsajet$(EXEEXT)
	$(CXXLINK) $(testReadIsajet_LDFLAGS) $(testReadIsajet_OBJECTS) $(testReadIsajet_LDADD) $(LIBS)
testReadParticleTable$(EXEEXT): $(testReadParticleTable_OBJECTS) $(testReadParticleTable_DEPENDENCIES) 
	@rm -f testReadParticleTable$(EXEEXT)
	$(CXXLINK) $(testReadParticleTable_LDFLAGS) $(testReadParticleTable_OBJECTS) $(testReadParticleTable_LDADD) $(LIBS)
testReadQQ$(EXEEXT): $(testReadQQ_OBJECTS) $(testReadQQ_DEPENDENCIES) 
	@rm -f testReadQQ$(EXEEXT)
	$(CXXLINK) $(testReadQQ_LDFLAGS) $(testReadQQ_OBJECTS) $(testReadQQ_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/listEvtGenNames.Po
include ./$(DEPDIR)/listPDGNames.Po
include ./$(DEPDIR)/listPythiaNames.Po
include ./$(DEPDIR)/testHepPDT.Po
include ./$(DEPDIR)/testPID.Po
include ./$(DEPDIR)/testReadEvtGen.Po
include ./$(DEPDIR)/testReadIsajet.Po
include ./$(DEPDIR)/testReadParticleTable.Po
include ./$(DEPDIR)/testReadQQ.Po

.cc.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS) $(check_SCRIPTS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic ctags distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
